stages:
  - dependencies
  - test
  - build
  - deploy

cache:
  paths:
    - node_modules/

variables:
  # When using dind service we need to instruct docker, to talk with the
  # daemon started inside of the service. The daemon is available with
  # a network connection instead of the default /var/run/docker.sock socket.
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services
  #
  # If you're using GitLab Runner 12.7 or earlier with the Kubernetes executor and Kubernetes 1.6 or earlier,
  # the variable must be set to tcp://localhost:2375 because of how the
  # Kubernetes executor connects services to the job container
  # DOCKER_HOST: tcp://localhost:2375
  #
  DOCKER_HOST: tcp://docker:2375
  #
  # This will instruct Docker not to start over TLS.
  DOCKER_TLS_CERTDIR: ""


install_dependencies:
  image: node:latest
  stage: dependencies
  script:
    - npm install
  artifacts:
    paths:
      - node_modules/

testing:
  image: node:latest
  stage: test
  script: yarn test --testResultsProcessor=jest-stare

  artifacts:
    paths:
      - jest-stare/

coverage:
  image: node:latest
  stage: test
  script: yarn run cover

  artifacts:
    paths:
      - coverage/

build:
  image: docker:19.03.13
  stage: build
  services:
    - docker:19.03.13-dind
  before_script:
    # - docker login $DOCKER_REGISTRY --username $DOCKER_REGISTRY_USER --password $DOCKER_REGISTRY_PASSWORD
    - echo "$DOCKER_REGISTRY_PASSWORD" | docker login $DOCKER_REGISTRY --username $DOCKER_REGISTRY_USER --password-stdin
    # - docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_PASSWORD
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest

# deploy_staging:
#   stage: deploy
#   only:
#     - staging
#   except:
#     - master
#   environment:
#     name: production
#   script:
#     - echo 'deploy_to_staging'
deploy_staging:
  image: 
    name: bitnami/kubectl:latest
    entrypoint: [""]
  stage: deploy
  only:
    - staging
  except:
    - master
  environment:
    name: staging
  script:
    - echo -n $KUBE_CONFIG_STAGING | base64 -d > ./config
    - kubectl set image deployment $DEPLOYMENT_NAME $POD_NAME=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --kubeconfig ./config --namespace default

deploy_production:
  # image: 
  #   name: bitnami/kubectl:latest
  #   entrypoint: [""]
  stage: deploy
  only:
    - master
  # environment:
  #   name: staging
  script:
    - echo 'deploy_to_production'
    
